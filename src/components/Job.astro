---
import { parseDate } from "chrono-node";
import type { Job } from "../queries";

const dateFormat = {
    month: "long",
    year: "numeric",
} satisfies Intl.DateTimeFormatOptions;

interface Props {
    job: Job;
}

const { job } = Astro.props;
const multi = job.positions.length > 1;

const start = job.start.toLocaleDateString("en-US", dateFormat);
const end = job.end.toLocaleDateString("en-US", dateFormat);

const locations = [...new Set(job.positions.map(p => p.data.location))].join(", ");
const roles = multi ? "Various roles" : job.positions[0].data.position;
---

<div>
    <div class="info">
        <h5>{job.company}</h5>
        <h5>{start} – {end}</h5>
        <h6>{roles}</h6>
        <h6>{locations}</h6>
    </div>
    {
        job.positions
            .sort((a, b) => parseDate(b.data.end)!.getTime() - parseDate(a.data.end)!.getTime())
            .map(async entry => {
                const { Content } = await entry.render();
                return (
                    <>
                        {multi && (
                            <div class="info">
                                <h6>{entry.data.position}</h6>
                                <h6>
                                    {entry.data.start} – {entry.data.end}
                                </h6>
                            </div>
                        )}
                        <Content />
                    </>
                );
            })
    }
</div>

<style>
    .info {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }

    .info > :nth-child(2n + 1) {
        justify-self: start;
    }

    .info > :nth-child(2n) {
        justify-self: end;
    }
</style>
